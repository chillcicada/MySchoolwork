import{_ as e,b as l,a9 as i,o as a}from"./chunks/framework.BjzsCNOl.js";const x=JSON.parse('{"title":"开发环境与工具","description":"","frontmatter":{},"headers":[],"relativePath":"面向科学计算的Fortran程序设计/第二讲-开发环境与工具.md","filePath":"面向科学计算的Fortran程序设计/第二讲-开发环境与工具.md","lastUpdated":1738393782000}'),n={name:"面向科学计算的Fortran程序设计/第二讲-开发环境与工具.md"};function r(d,t,s,c,o,h){return a(),l("div",null,t[0]||(t[0]=[i(`<h1 id="开发环境与工具" tabindex="-1">开发环境与工具 <a class="header-anchor" href="#开发环境与工具" aria-label="Permalink to &quot;开发环境与工具&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#开发环境与工具">开发环境与工具</a><ul><li><a href="#目录">目录</a></li><li><a href="#linux-操作系统">*Linux 操作系统</a></li><li><a href="#unix-操作系统">*Unix 操作系统</a></li><li><a href="#linux-常用命令">Linux 常用命令</a><ul><li><a href="#export-命令与环境变量">export 命令与环境变量</a></li><li><a href="#环境变量">环境变量</a></li><li><a href="#linux-下的脚本文件">Linux 下的脚本文件</a></li><li><a href="#ulimit-命令">ulimit 命令</a></li></ul></li><li><a href="#编辑器-vi">编辑器 vi</a><ul><li><a href="#vi-编辑器">Vi 编辑器</a></li><li><a href="#vi-编辑器常用命令">Vi 编辑器常用命令</a></li></ul></li><li><a href="#linux-下编译器的使用">Linux 下编译器的使用</a><ul><li><a href="#编译器">编译器</a></li><li><a href="#linux-下主要编译器">Linux 下主要编译器</a></li><li><a href="#编译优化级别">编译优化级别</a></li><li><a href="#编译优化选项">编译优化选项</a></li><li><a href="#makefile">Makefile</a></li></ul></li></ul></li></ul><h2 id="linux-操作系统" tabindex="-1">*Linux 操作系统 <a class="header-anchor" href="#linux-操作系统" aria-label="Permalink to &quot;\\*Linux 操作系统&quot;">​</a></h2><ul><li>全称 GNU/Linux，是一种免费使用和自由传播的类 UNIX 操作系统，其内核由林纳斯·本纳第克特·托瓦兹于 1991 年 10 月 5 日首次发布</li><li>主要受到 Minix 和 Unix 思想的启发，是一个基于 POSIX 的多用户、多任务、支持多线程和多 CPU 的操作系统</li><li>能运行主要的 Unix 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件，是性能稳定的多用户网络操作系统</li><li>发行版本包括 Debian、 Ubuntu、 RHEL、 Centos、 Slackware 等</li></ul><h2 id="unix-操作系统" tabindex="-1">*Unix 操作系统 <a class="header-anchor" href="#unix-操作系统" aria-label="Permalink to &quot;\\*Unix 操作系统&quot;">​</a></h2><ul><li>是分时操作系统，最早于 1970 年问世</li><li>1972 年，Dennis Ritchie 开发出了 C 语言，用来改写原来用汇编语言编写的 UNIX</li><li>提供了良好的用户界面，文件系统是树形结构</li><li>把文件、文件目录和设备统一处理</li><li>包含有非常丰富的语言处理程序、实用程序和开发软件用的工具性软件</li><li>还提供利进程间的简单通信功能</li></ul><h2 id="linux-常用命令" tabindex="-1">Linux 常用命令 <a class="header-anchor" href="#linux-常用命令" aria-label="Permalink to &quot;Linux 常用命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">export</td><td style="text-align:center;">查看、设置环境变量</td></tr><tr><td style="text-align:center;">top</td><td style="text-align:center;">查看进程情况</td></tr><tr><td style="text-align:center;">kill</td><td style="text-align:center;">结束（停止）进程</td></tr><tr><td style="text-align:center;">find</td><td style="text-align:center;">根据文件名中的字段查找文件</td></tr><tr><td style="text-align:center;">grep</td><td style="text-align:center;">找出若干文件中符合规则的内容</td></tr><tr><td style="text-align:center;">sed</td><td style="text-align:center;">替换若干文件中符合规则的字段</td></tr><tr><td style="text-align:center;">ulimit</td><td style="text-align:center;">查看、设置资源最大调度</td></tr><tr><td style="text-align:center;">diff</td><td style="text-align:center;">对比文件之间的异同</td></tr><tr><td style="text-align:center;">which</td><td style="text-align:center;">查看一个命令所在的目录路径</td></tr><tr><td style="text-align:center;">vi</td><td style="text-align:center;">编辑 ASCII 码文件</td></tr></tbody></table><h3 id="export-命令与环境变量" tabindex="-1">export 命令与环境变量 <a class="header-anchor" href="#export-命令与环境变量" aria-label="Permalink to &quot;export 命令与环境变量&quot;">​</a></h3><ul><li>环境变量一般指操作系统中指定运行环境的公共参数，即系统预定义的参数。要查看环境变量值时，需加上“$” <ul><li>例（显示某个环境变量）：<code>echo $PATH</code></li></ul></li><li>环境变量可以有多个值，存在先后顺序（离等号越近的优先级越高），值之间用冒号(“:”)隔开</li><li>显示所有环境变量的命令：<code>export</code></li><li>修改环境变量的命令：<code>export LD_LIBRARY_PATH=/opt/netCDF-intel15-withhdf5/lib:$LD_LIBRARY_PATH</code></li><li>用 <code>man export</code> 命令获取 <code>export</code> 命令的使用说明</li></ul><h3 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">较为重要的环境变量</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">PATH</td><td style="text-align:center;">操作系统命令或可执行文件的路径</td></tr><tr><td style="text-align:center;">LIBRARY_PATH</td><td style="text-align:center;">静态链接库的路径</td></tr><tr><td style="text-align:center;">LD_LIBRARY_PATH</td><td style="text-align:center;">动态链接库的路径</td></tr></tbody></table><p>共性特点：当上述环境变量有多个值（路径）时。对可执行文件和链接库的匹配按照从左到右</p><ul><li>通过 ~/.bashrc 和 ~/.bash_profile 文件在登录时自动加载环境变量</li><li>~/.bashrc 或 ~/.bash_profile 文件加入直接设置环境变量的 export 命令，或通过 source 命令设置环境变量</li></ul><h3 id="linux-下的脚本文件" tabindex="-1">Linux 下的脚本文件 <a class="header-anchor" href="#linux-下的脚本文件" aria-label="Permalink to &quot;Linux 下的脚本文件&quot;">​</a></h3><ul><li>Shell 脚本文件 <ul><li>把各类命令预先放入一个文件中，方便一次性执行多个命令</li><li>用于批处理或者工作流控制，也可用于设置环境变量</li><li>常用格式包括 bash 脚本、csh 脚本、perl 脚本、 ruby 脚本等</li></ul></li></ul><h3 id="ulimit-命令" tabindex="-1">ulimit 命令 <a class="header-anchor" href="#ulimit-命令" aria-label="Permalink to &quot;ulimit 命令&quot;">​</a></h3><ul><li><code>ulimit -a</code> 命令：显示各种资源的最大限度</li><li><code>ulimit -s unlimited</code>：将栈的最大大小设置为无限</li></ul><h2 id="编辑器-vi" tabindex="-1">编辑器 vi <a class="header-anchor" href="#编辑器-vi" aria-label="Permalink to &quot;编辑器 vi&quot;">​</a></h2><h3 id="vi-编辑器" tabindex="-1">Vi 编辑器 <a class="header-anchor" href="#vi-编辑器" aria-label="Permalink to &quot;Vi 编辑器&quot;">​</a></h3><ul><li>vi 和 vim（ vi 的增强版本）是 Linux 中最常用的编辑器</li><li>一款由加州大学伯克利分校 Bill Joy 研究开发的文本编辑器</li><li>只能编辑字符，不能对字体、段落进行排版；既可以新建文件，也可以编辑文件；没有菜单，只有命令，且命令繁多</li><li>三种工作模式 <ul><li>命令模式： 启动 vi 后即进入命令模式，并可转换为文本编辑模式和最后行模式。在命令模式下，从键盘上输入的任何字符都被当作编辑命令来解释，而不会在屏幕上显示。如果输入的字符是合法的 vi 命令，则 vi 就会完成相应的动作；否则 vi 会响铃警告。</li><li>文本编辑模式： 用于字符编辑。在命令模式下输入 <code>i</code> （插入命令）、 <code>a</code> （附加命令）等命令后进入文本编辑模式，此时输入的任何字符都被 vi 当作文件内容显示在屏幕上。按 <code>Esc</code> 键可从文本编辑模式返回到命令模式。</li><li>最后行模式：在命令模式下，按 “:” 键进入最后行模式，此时 vi 会在屏幕的底部显示 “:” 符号年作为最后行模式的提示符，等待用户输入相关命令。命令执行完毕后，vi 自动回到命令模式。</li></ul></li><li>其他： <ul><li>搜索字段： “/string”，“/string\\c”，“n”</li><li>替换字段： “:%s/string1/string2/g”</li><li>撤销操作：在命令模式下敲击命令 <code>u</code></li><li>复制粘贴操作 <ul><li>拷贝：在命令模式下敲下 <code>v</code> 后选出被复制区域，然后敲下 <code>y</code> 进行复制</li><li>黏贴： 在命令模式下，找到适当位置后敲下 <code>p</code></li></ul></li></ul></li></ul><h3 id="vi-编辑器常用命令" tabindex="-1">Vi 编辑器常用命令 <a class="header-anchor" href="#vi-编辑器常用命令" aria-label="Permalink to &quot;Vi 编辑器常用命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">ctrl + b/u</td><td style="text-align:center;">向上移动一屏/半屏</td></tr><tr><td style="text-align:center;">ctrl + f/d</td><td style="text-align:center;">向下移动一屏/半屏</td></tr><tr><td style="text-align:center;">i</td><td style="text-align:center;">在光标之前插入</td></tr><tr><td style="text-align:center;">a</td><td style="text-align:center;">在光标之后插入</td></tr><tr><td style="text-align:center;">dw</td><td style="text-align:center;">删除一个单词</td></tr><tr><td style="text-align:center;">dd</td><td style="text-align:center;">删除一行</td></tr><tr><td style="text-align:center;">d</td><td style="text-align:center;">删除光标到行尾的内容</td></tr><tr><td style="text-align:center;">:w</td><td style="text-align:center;">保存</td></tr><tr><td style="text-align:center;">:wq!</td><td style="text-align:center;">保存退出</td></tr><tr><td style="text-align:center;">:q!</td><td style="text-align:center;">不保存退出</td></tr><tr><td style="text-align:center;">G</td><td style="text-align:center;">到文件最后一行</td></tr><tr><td style="text-align:center;">ctrl+g</td><td style="text-align:center;">显示文件名（含路径）和文件行数</td></tr></tbody></table><h2 id="linux-下编译器的使用" tabindex="-1">Linux 下编译器的使用 <a class="header-anchor" href="#linux-下编译器的使用" aria-label="Permalink to &quot;Linux 下编译器的使用&quot;">​</a></h2><h3 id="编译器" tabindex="-1">编译器 <a class="header-anchor" href="#编译器" aria-label="Permalink to &quot;编译器&quot;">​</a></h3><ul><li>将一种编程语言（通常为高级语言）翻译为另一种语言（通常为低级语言）的程序</li><li>主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 汇编程 序 (assembler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)</li><li>包括词法分析、语法分析、语义分析、中间代码生成、中间代码优化、后端代码优化、代码生成等步骤</li><li>有众多编译选项供选择使用</li><li>GNU、LLVM、Open64 等开源编译器；Intel 等商用编译器</li></ul><h3 id="linux-下主要编译器" tabindex="-1">Linux 下主要编译器 <a class="header-anchor" href="#linux-下主要编译器" aria-label="Permalink to &quot;Linux 下主要编译器&quot;">​</a></h3><ul><li>gcc 编译器 <ul><li>由GNU开发的编程语言编译器套件，是以 GPL 许可证所发行的自由软件，包括 C、C++、ObjectiveC、Fortran、Java、Ada 和 Go 语言前端， 也包括了这些语言的库（如 libstdc++， libgcj 等）</li><li>最基本的用法：<code>gfortran [options] [filenames]</code></li></ul></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">编译选项</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-c</td><td style="text-align:center;">只编译生成以 <code>.o</code> 为后缀的目标文件，不链接成为可执行文件</td></tr><tr><td style="text-align:center;">-o output_filename</td><td style="text-align:center;">指定输出文件名（不能与源文件同名），默认名为 <code>a.out</code></td></tr><tr><td style="text-align:center;">-g</td><td style="text-align:center;">产生符号调试工具（GNU 的 gdb）所必要的符号信息</td></tr><tr><td style="text-align:center;">-traceback</td><td style="text-align:center;">产生函数栈的调用信息，使程序运行段错误时输出栈信息</td></tr><tr><td style="text-align:center;">-O0~3</td><td style="text-align:center;">编译器优化级别，级别越高，程序运行速度越快，但出错风险更高</td></tr><tr><td style="text-align:center;">-S</td><td style="text-align:center;">编译生成汇编文件</td></tr><tr><td style="text-align:center;">-I/dir</td><td style="text-align:center;">指定头文件、module 文件所在的目录</td></tr></tbody></table><ul><li>Intel 编译器 <ul><li>由 Intel 公司研发的编程语言编译器套件，非开源软件，包括 C、C++、Fortran 等语言前端，也包括了这些语言的库</li><li>最基本的用法：<code>ifort [options] [filenames]</code></li></ul></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">编译选项</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-c</td><td style="text-align:center;">只编译生成以 <code>.o</code> 为后缀的目标文件，不链接成为可执行文件</td></tr><tr><td style="text-align:center;">-o output_filename</td><td style="text-align:center;">指定输出文件名（不能与源文件同名），默认名为 <code>a.out</code></td></tr><tr><td style="text-align:center;">-g</td><td style="text-align:center;">产生符号调试工具（GNU 的 gdb）所必要的符号信息</td></tr><tr><td style="text-align:center;">-traceback</td><td style="text-align:center;">产生函数栈的调用信息，使程序运行段错误时输出栈信息</td></tr><tr><td style="text-align:center;">-O0~3</td><td style="text-align:center;">编译器优化级别，级别越高，程序运行速度越快，但出错风险更高</td></tr><tr><td style="text-align:center;">-S</td><td style="text-align:center;">编译生成汇编文件</td></tr><tr><td style="text-align:center;">-I/dir</td><td style="text-align:center;">指定头文件、module 文件所在的目录</td></tr></tbody></table><h3 id="编译优化级别" tabindex="-1">编译优化级别 <a class="header-anchor" href="#编译优化级别" aria-label="Permalink to &quot;编译优化级别&quot;">​</a></h3><ul><li>通过不同编译优化级别，开启或关闭编译优化组合 <ul><li><code>-O0</code>：没有编译优化。生成没有优化过的二进制代码，所需编译时间最短，主要用于程序调试</li><li><code>-O1</code>：有限优化，在影响到调试信息的地方不进行优化；编译时间不会增加太多</li><li><code>-O2</code>：高度优化，在 <code>-O1</code> 的基础上，尝试更多寄存器级优化与指令级优化；调试信息不友好，编译时间较长</li><li><code>-O3</code>：在 <code>-O2</code> 基础上增加了更加激进的优化，如函数内嵌和向量化等</li></ul></li></ul><h3 id="编译优化选项" tabindex="-1">编译优化选项 <a class="header-anchor" href="#编译优化选项" aria-label="Permalink to &quot;编译优化选项&quot;">​</a></h3><ul><li>Intel 编译器 <ul><li>用 <code>ifort -help</code> 命令查看编译优化选项</li><li>与浮点计算精度相关的编译选项包括 <ul><li><code>-fp-model</code> <code>-fp-speculation</code> <code>-mp1</code> <code>-no-vec</code> <code>-no-simd</code></li></ul></li></ul></li><li>GNU 编译器 <ul><li>用 <code>man gcc</code> 和 <code>man gfortran</code> 命令查看编译优化选项</li><li>与浮点计算精度相关的编译选项包括 <ul><li><code>-ffloat-store</code> <code>-fno-unsafe-math-optimizations</code> <code>-fnoassociative-math</code> <code>-fno-reciprocal-math</code> <code>-fno-finite-mathonly</code> <code>-fno-rounding-math</code> <code>-fno-cx-limited-range</code></li></ul></li></ul></li></ul><h3 id="makefile" tabindex="-1">Makefile <a class="header-anchor" href="#makefile" aria-label="Permalink to &quot;Makefile&quot;">​</a></h3><blockquote><p>Makefile 中只允许 Tab 缩进，不允许空格缩进</p></blockquote><ul><li>为自动编译一组源文件提供制导信息的文件</li></ul><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定编译器的编辑命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC := clang</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定可执行文件所依赖的二进制文件，及二进制文件编译的先后顺序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.o func1.o func2.o</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -o </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $^</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定二进制文件的编译规则。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 任何.o文件都会遵照这个编译规则（当存在于 \`.o\` 文件名字相同的 \`.c\` 文件时）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.c.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c -o </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $&lt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定删除目标文件的规则</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rm -f main *.o</span></span></code></pre></div>`,40)]))}const g=e(n,[["render",r]]);export{x as __pageData,g as default};
