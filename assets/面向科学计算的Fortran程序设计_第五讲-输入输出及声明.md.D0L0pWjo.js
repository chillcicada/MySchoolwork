import{_ as t,b as s,a9 as a,o as e}from"./chunks/framework.BjzsCNOl.js";const c=JSON.parse('{"title":"输入输出及声明","description":"","frontmatter":{},"headers":[],"relativePath":"面向科学计算的Fortran程序设计/第五讲-输入输出及声明.md","filePath":"面向科学计算的Fortran程序设计/第五讲-输入输出及声明.md","lastUpdated":1738393782000}'),n={name:"面向科学计算的Fortran程序设计/第五讲-输入输出及声明.md"};function l(h,i,r,d,p,k){return e(),s("div",null,i[0]||(i[0]=[a(`<h1 id="输入输出及声明" tabindex="-1">输入输出及声明 <a class="header-anchor" href="#输入输出及声明" aria-label="Permalink to &quot;输入输出及声明&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#输入输出及声明">输入输出及声明</a><ul><li><a href="#目录">目录</a></li><li><a href="#输入与输出命令">输入与输出命令</a><ul><li><a href="#write-输出命令">write: 输出命令</a></li><li><a href="#print-命令">print 命令</a></li><li><a href="#read-输入命令">read: 输入命令</a></li><li><a href="#格式化输入输出">格式化输入输出</a></li></ul></li><li><a href="#声明">声明</a></li><li><a href="#自定义数据类型">自定义数据类型</a></li></ul></li></ul><h2 id="输入与输出命令" tabindex="-1">输入与输出命令 <a class="header-anchor" href="#输入与输出命令" aria-label="Permalink to &quot;输入与输出命令&quot;">​</a></h2><h3 id="write-输出命令" tabindex="-1">write: 输出命令 <a class="header-anchor" href="#write-输出命令" aria-label="Permalink to &quot;write: 输出命令&quot;">​</a></h3><ul><li>格式：<code>write(UNIT=*,FMT=*) 要输出的内容</code>，括号中的各参数不可缺少，否则会产生编译错误或运行错误。<code>UNIT</code> 为输出位置，<code>FMT</code> 为输出格式</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">UNIT 的值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">星号 “*”</td><td style="text-align:center;">将要输出的内容，按照指定的格式要求，输出到屏幕</td></tr><tr><td style="text-align:center;">0 或 6</td><td style="text-align:center;">将要输出的内容，按照指定的格式要求，输出到已打开的相同 unit 文件，当未打开文件时，输出到屏幕</td></tr><tr><td style="text-align:center;">0 和 6 以外的正整数</td><td style="text-align:center;">将要输出的内容，按照指定的格式要求，输出到已打开的相同 unit 文件；当未打开时（此时 unit 值不能是 5），会输出到 <code>fort.*</code>，其中 <code>*</code> 为 unit 值</td></tr><tr><td style="text-align:center;">字符串变量</td><td style="text-align:center;">将要输出的内容，按照指定的格式要求，输出到字符串变量；字符串变量需要足够长，否则会运行出错</td></tr></tbody></table><blockquote><p>unit=5 是键盘输入的值，在未绑定文件的情况下接到输出时，会导致运行错误</p><p>建议：不要把 unit 值设为负整数，以免导致运行错误，unit 具有全局性，最好不要修改 0、5、6 等值</p></blockquote><ul><li>要输出的内容是由若干字符串和变量构成的序列，之间通过逗号 “,” 间隔，变量的类型可以是字符串、整数、浮点数、逻辑、复数，也可以是数组和自定义类型变量</li><li><code>trim</code> 用于删除字符串变量中最后的空格</li></ul><h3 id="print-命令" tabindex="-1">print 命令 <a class="header-anchor" href="#print-命令" aria-label="Permalink to &quot;print 命令&quot;">​</a></h3><ul><li>类似于 write 命令，print 也是输出命令，但是 print 后面没有括号，只有一个星号 (“*”)，且与要输出的内容之间，通过逗号 “,” 间隔。</li><li>print 只能将信息输出到屏幕</li></ul><div class="language-Fortran vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Fortran</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">! print.f90</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">program</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  implicit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> none</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  print</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value &#39;a&#39;=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end program</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span></code></pre></div><p>以下为编译输出过程</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gfortran</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> print.f90</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./a.out</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.exe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.00000000</span></span></code></pre></div><h3 id="read-输入命令" tabindex="-1">read: 输入命令 <a class="header-anchor" href="#read-输入命令" aria-label="Permalink to &quot;read: 输入命令&quot;">​</a></h3><p>Fortran 默认以空格作为分隔符，输入时，输入的数据之间可以用空格隔开，输入完毕后，按回车键结束输入</p><h3 id="格式化输入输出" tabindex="-1">格式化输入输出 <a class="header-anchor" href="#格式化输入输出" aria-label="Permalink to &quot;格式化输入输出&quot;">​</a></h3><ul><li>通过在 write 和 print 命令中，指定格式要求得以实现</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">格式字段</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">nX</td><td style="text-align:center;">n 个空格，即把输出的位置向右跳过 n 个位置</td></tr><tr><td style="text-align:center;">A</td><td style="text-align:center;">以字符串长度的字符宽度来输出/输入字符串</td></tr><tr><td style="text-align:center;">Aw</td><td style="text-align:center;">以 w 个字符宽度来输出/输入字符串</td></tr><tr><td style="text-align:center;">Dw.d</td><td style="text-align:center;">以 w 个字符宽来输入/输出指数类型的浮点数，小数点后部分占 d 个字符宽；<strong>通常要求 w-d 不少于 7；有效数部分大于等于 0.1 且小于 1</strong></td></tr><tr><td style="text-align:center;">Ew.d[Ee]</td><td style="text-align:center;">以 w 个字符宽来输出指数类型的浮点数，小数点后部分 d 个字符宽，指数部分占 e 个字符宽；通常要求 w-d 不少于 7，w-d-e 不少于 5；有效数部分大于等于 0.1 且小于 1</td></tr><tr><td style="text-align:center;">ENw.d[Ee]</td><td style="text-align:center;">以 w 个字符宽来输出指数类型的浮点数，小数点后部分占 d 个字符宽，指数部分占 e 个字符宽；通常要求 w-d 不少于 7，w-d-e 不少于 5；指数值是 3 的整数倍，有效数部分大于等于 1 且小于 1000</td></tr><tr><td style="text-align:center;">ESw.d[Ee]</td><td style="text-align:center;">以 w 个字符宽来输出指数类型的浮点数，小数点后部分占 d 个字符宽，指数部分占 e 个字符宽；通常要求 w-d 不少于 7，w-d-e 不少于 5；有效数部分大于等于 1 且小于 10</td></tr><tr><td style="text-align:center;">Fw.d</td><td style="text-align:center;">以 w 个字符宽来输出浮点数（非指数类型），通常要求 w-d 大于整数部分的数位；w 可以是 0，表示自动匹配字符宽度</td></tr><tr><td style="text-align:center;">Gw.d[Ee]</td><td style="text-align:center;">以 w 字符宽度输出任何类型数据。当被输出的数是字符串时，其等同于 Aw；当被输出的数是整数时，其等同于 Iw；当被输出的数是浮点数时，其等同于 Ew.d[Ee]</td></tr><tr><td style="text-align:center;">Iw[.m]</td><td style="text-align:center;">以 w 字符宽度输出整数，最少输出 m 个数字。通常要求 w&gt;d；当 d 大于整数的数位时，高位会补 0；I0 表示输出整数的所有数位且左边没有空格；当 w 小于整数的数位时，会输出若干星号</td></tr><tr><td style="text-align:center;">Lw</td><td style="text-align:center;">以 w 个字符宽来输出 T 或 F 真假值</td></tr></tbody></table><h2 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h2><h2 id="自定义数据类型" tabindex="-1">自定义数据类型 <a class="header-anchor" href="#自定义数据类型" aria-label="Permalink to &quot;自定义数据类型&quot;">​</a></h2><p>使用 <code>type</code> 命令来自定义数据类型，其格式为：</p><div class="language-Fortran vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Fortran</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type declaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">! for example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  character</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  character</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           ::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              ::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student</span></span></code></pre></div>`,23)]))}const o=t(n,[["render",l]]);export{c as __pageData,o as default};
