import{_ as i,b as a,a9 as n,o as l}from"./chunks/framework.BjzsCNOl.js";const g=JSON.parse('{"title":"文件系统","description":"","frontmatter":{},"headers":[],"relativePath":"面向科学计算的Fortran程序设计/第十三讲-文件系统.md","filePath":"面向科学计算的Fortran程序设计/第十三讲-文件系统.md","lastUpdated":1738393782000}'),h={name:"面向科学计算的Fortran程序设计/第十三讲-文件系统.md"};function t(p,s,k,e,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#文件系统">文件系统</a><ul><li><a href="#目录">目录</a></li><li><a href="#open">OPEN</a></li><li><a href="#write-与-read">WRITE 与 READ</a></li><li><a href="#inquire">INQUIRE</a></li><li><a href="#其他文件运行命令">其他文件运行命令</a></li><li><a href="#namelist">NAMELIST</a></li></ul></li></ul><h2 id="open" tabindex="-1">OPEN <a class="header-anchor" href="#open" aria-label="Permalink to &quot;OPEN&quot;">​</a></h2><p>OPEN，用于打开文件，文件读取操作有 “顺序读写” 和 “直接读写” 两种</p><div class="language-Fortran vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Fortran</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OPEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">UNIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unit,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> FORM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> STATUS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ACCESS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> RECL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ERR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> IOSTAT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iostat,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> BLANK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> POSITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> PAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> DELIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>OPEN 指令参数如下：</p><ul><li><strong>UNIT</strong>: unit 文件绑定的标签</li><li>FILE: filename 文件名</li><li><strong>FORM</strong>: 被打开文件的格式 <ul><li>FORMATTED: 文本文件</li><li>UNFORMATTED: 二进制文件，此时相应读写命令不能含有格式信息</li></ul></li><li><strong>STATUS</strong>: 说明打开的文件状态 <ul><li>NEW: 文件本不存在，创建一个新文件，文件存在会报错</li><li>OLD: 打开已有文件，不存在时会报错</li><li>REPLACE: 创建一个新文件，文件已存在时会被覆盖</li><li>SCRATCH: 创建一个临时文件，此时无需指定文件名；临时文件会在程序结束时被删除</li><li>UNKNOWN: 默认值，通常与 OLD 效果相同</li></ul></li><li><strong>ACCESS</strong><ul><li>sequential: 文件按照顺序读写（默认值）</li><li>direct: 直接读写文件，读写操作可以任意指定文件中的位置</li><li>stream: 读写二进制流，采用此访问方式不会产生额外信息</li></ul></li><li><strong>RECL</strong>: length 单位是字符，默认值为 1 <ul><li>在顺序读取文件时，RECL 字段用来设置一次数据读写的最大量</li><li>在直接读取文件时，RECL 字段用于设置每一个模块中的字符数</li></ul></li><li><strong>ERR</strong>: label 当文件打开发生错误时，程序会跳转到对应的 label 来继续执行</li><li><strong>IOSTAT</strong>: iostat io 流读取状态，将文件打开的状态传给 iostat 变量，其中 iostat &gt; 0 表示文件打开操作发生错误，iostat = 0 表示文件打开操作正常，iostat &lt; 0 表示文件终了</li><li>BLANK</li><li><strong>POSITION</strong>: 设置文件打开时的读写位置 <ul><li>ASIS: 保持文件打开时的读写位置不变</li><li>REWIND: 文件打开时的读写位置为文件开头</li><li>APPEND: 文件打开时的读写位置为文件结尾</li></ul></li><li><strong>ACTION</strong>: 设置所打开文件的读写权限 <ul><li>READ: 只读</li><li>WRITE: 只写</li><li>READWRITE: 读写，默认值</li></ul></li><li>PAD</li><li>DELIM</li></ul><h2 id="write-与-read" tabindex="-1">WRITE 与 READ <a class="header-anchor" href="#write-与-read" aria-label="Permalink to &quot;WRITE 与 READ&quot;">​</a></h2><p>WRITE 与 READ，用于读写文件</p><div class="language-Fortran vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Fortran</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WRITE/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">UNIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unit,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> FMT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> REC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">record,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> IOSTAT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iostat,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ERR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endlabel,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ADVANCE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> SIZE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size)</span></span></code></pre></div><ul><li><strong>NML</strong>: 指定要读写的 namelist</li><li><strong>REC</strong>=record: 在直接读取文件方式中，设置所要读写的文件模块位置</li><li><strong>END</strong>=endlabel: 指定在读到文件末尾时，要转移到 endlabel 对应的代码行继续执行</li><li><strong>ADVANCE</strong>=&#39;YES&#39; OR &#39;NO&#39;: 设置在文本格式中，每次读写命令完成后，读写位置是否移到下一行。默认值是 &#39;YES&#39;</li></ul><h2 id="inquire" tabindex="-1">INQUIRE <a class="header-anchor" href="#inquire" aria-label="Permalink to &quot;INQUIRE&quot;">​</a></h2><p>INQUIRE，用于查询文件状态</p><div class="language-Fortran vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Fortran</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INQUIRE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">UNIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unit,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> IOSTAT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iostat,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ERR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> EXIST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exist,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  OPENED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opened,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NUMBER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">number,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NAMED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">named,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ACCESS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">access,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> SEQUENTIAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequential,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> DIRECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">direct,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> FORM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> FORMATTED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formatted,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> UNFORMATTED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unformatted,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> RECL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">recl)</span></span></code></pre></div><p>INQUIRE 指令参数如下：</p><ul><li>FILE=filename: 返回相应的文件名</li><li>EXIST=exist: 返回文件是否存在</li><li>OPENED=opened: 返回文件是否已被打开</li><li>NAMED=named: 返回文件是否取名字了</li><li>ACCESS=access : 返回文件的访问方式</li><li>DIRECT=direct: 查看文件是否是采用了直接读写方式</li><li>SEQUENTIAL=sequential: 查看文件是否是采用了顺序读写方式</li><li>FORM=form: 返回文件的保存方式，二进制还是文本</li><li>......</li></ul><h2 id="其他文件运行命令" tabindex="-1">其他文件运行命令 <a class="header-anchor" href="#其他文件运行命令" aria-label="Permalink to &quot;其他文件运行命令&quot;">​</a></h2><ul><li>BACKSPACE：把文件读写位置退回一步</li><li>ENDFILE：把文件读写位置编程文件结尾</li><li>REWIND：把文件读写位置倒回文件开头</li><li>CLOSE：把文件关闭，不再进行读写操作</li></ul><h2 id="namelist" tabindex="-1">NAMELIST <a class="header-anchor" href="#namelist" aria-label="Permalink to &quot;NAMELIST&quot;">​</a></h2><blockquote><p>NAMELIST 文件必须以 EOF (lf, crlf)结尾，NAMELIST 文件后缀名通常为 <code>.nml</code> 不过实际上任何文本文件后缀名均可，通常也可用 <code>.txt</code> 代替。</p></blockquote><p>NAMELIST 调用举例：</p><div class="language-Fortran vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Fortran</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">program</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  implicit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> none</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  logical</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> .true.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  namelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /na/ a, b, c, d</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">na)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end program</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span></code></pre></div><p>对应 NAMELIST 文件如下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&amp;NA</span></span>
<span class="line"><span> A=          1,</span></span>
<span class="line"><span> B=          2,</span></span>
<span class="line"><span> C=          3,</span></span>
<span class="line"><span> D= T,</span></span>
<span class="line"><span>/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 在输入的 Namelist 中，可以缺少某些变量，但不能有未定义的变量</span></span>
<span class="line"><span>- 一个文件中可以包含多个 namelist 变量的输入设置</span></span>
<span class="line"><span>- 在输入的 namelist 中，逻辑变量的值可以写成 “T”、“F”，也可以是 “.true.” 和 “.false.”</span></span>
<span class="line"><span>- 在输入的 Namelist 中，字符串需要带上引号</span></span>
<span class="line"><span></span></span>
<span class="line"><span>gfortran 对应 namelist 格式如下：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`txt</span></span>
<span class="line"><span>&amp;NA</span></span>
<span class="line"><span> A=          1,</span></span>
<span class="line"><span> B=          2,</span></span>
<span class="line"><span> C=          3,</span></span>
<span class="line"><span> D= 3*5          ,</span></span>
<span class="line"><span> E=T,</span></span>
<span class="line"><span> F=  1.1100000000000001     ,</span></span>
<span class="line"><span> G=          1,          3,          5,</span></span>
<span class="line"><span> STR=&quot;hello     &quot;,</span></span>
<span class="line"><span>/</span></span></code></pre></div><p>ifort 对应 namelist 格式如下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&amp;NA</span></span>
<span class="line"><span>A       =           1,</span></span>
<span class="line"><span>B       =           2,</span></span>
<span class="line"><span>C       =           3,</span></span>
<span class="line"><span>D       = 3*5,</span></span>
<span class="line"><span>E       = T,</span></span>
<span class="line"><span>F       =   1.11000000000000     ,</span></span>
<span class="line"><span>G       =           1,           3,           5,</span></span>
<span class="line"><span>STR     = hello</span></span>
<span class="line"><span>/</span></span></code></pre></div><p>使用 gfortran 编译 ifort 格式时会报错，建议采用 gfortran 格式，或者使用 <code>--free-form</code> 参数编译。</p>`,28)]))}const F=i(h,[["render",t]]);export{g as __pageData,F as default};
